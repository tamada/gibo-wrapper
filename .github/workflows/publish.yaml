name: publish

on: 
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  setup:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'releases/v') && github.event.pull_request.merged == true
    outputs:
      appname: gibo-wrapper
      tag: ${{ steps.vars.outputs.tag }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    env:
      REPO: https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize
        shell: bash
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "action@github.com"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Get tag name
        id: vars
        run: |
          HEAD_REF=${{ github.head_ref }}
          echo "tag=${HEAD_REF##*/v}" >> $GITHUB_OUTPUT

      - name: Push Tag
        run: |
          git tag -a v${{ steps.vars.outputs.tag }} -m "Release ${{ steps.vars.outputs.tag }}"
          git push $REPO v${{ steps.vars.outputs.tag }}

      - name: Create release
        id: create_release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: v${{ steps.vars.outputs.tag }}
          title: Release v${{ steps.vars.outputs.tag }}
          draft: false
          prerelease: false

  publish:
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: ${{ needs.setup.outputs.appname }}
            asset_name: ${{ needs.setup.outputs.appname }}-${{ needs.setup.outputs.tag }}_linux_amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: ${{ needs.setup.outputs.appname }}
            asset_name: ${{ needs.setup.outputs.appname }}-${{ needs.setup.outputs.tag }}_linux_arm64
            # - os: ubuntu-latest
            #   target: aarch64-pc-windows-gnullvm
            #   artifact_name: ${{ needs.setup.outputs.appname }}.exe
            #   asset_name: ${{ needs.setup.outputs.appname }}-${{ needs.setup.outputs.tag }}_windows_amd64
            # - os: ubuntu-latest
            #   target: x86_64-pc-windows-gnu
            #   artifact_name: ${{ needs.setup.outputs.appname }}.exe
            #   asset_name: ${{ needs.setup.outputs.appname }}-${{ needs.setup.outputs.tag }}_windows_arm64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: ${{ needs.setup.outputs.appname }}
            asset_name: ${{ needs.setup.outputs.appname }}-${{ needs.setup.outputs.tag }}_darwin_amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ${{ needs.setup.outputs.appname }}
            asset_name: ${{ needs.setup.outputs.appname }}-${{ needs.setup.outputs.tag }}_darwin_arm64
    steps:
      # initialization
      - name: Checkout the project
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod

      - name: Setup variables
        id: vars
        shell: bash
        run: |
          DIR=$(echo "${{ needs.setup.outputs.appname }}-${{ needs.setup.outputs.tag }}")
          echo "dir=$DIR" >> $GITHUB_OUTPUT
        
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup
        run: rustup update stable

      - name: Setup Rust (1/2) (toolchain)
        uses: taiki-e/setup-cross-toolchain-action@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          target: ${{ matrix.target }}

      - name: Cross build (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}
        
      - name: Cross build (Linux and Windows)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo build --release --target ${{ matrix.target }}

      # publish release
      - name: Create release file
        shell: bash
        run: |
          DIR=${{ steps.vars.outputs.dir }}
          DIST=${{ matrix.target }}
          mkdir -p dist/$DIST/$DIR
          # cp -r site/public dist/$DIST/$DIR/docs
          cp -r README.md LICENSE target/completions target/${{ matrix.target }}/release/${{ matrix.artifact_name }} dist/$DIST/$DIR
          tar cvfz dist/${{ matrix.asset_name }}.tar.gz -C dist/$DIST $DIR

      - name: Upload release assets
        id: upload-release-assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_path: dist/${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/x-gzip
          upload_url: ${{ needs.setup.outputs.upload_url }}